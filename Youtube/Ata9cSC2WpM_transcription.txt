 Angular, a TypeScript-based framework for building user interfaces.
 It was developed at Google and released in 2016 as the sequel to AngularJS.
 As an Angular developer, you hit the ground running with its extremely powerful CLI tool.
 When you generate your initial application, it comes pre-configured with routing, a testing framework, and your favorite style pre-processor.
 In addition, the Magic NG ad command can turn your app into a progressive web app, add server-side rendering, fire-based support, and do a whole bunch of other cool stuff.
 But at its core, Angular is just a component-based UI library.
 I can create a component with the CLI, and if we go into its TypeScript file, you'll notice the component decorator, which makes this TypeScript class a component.
 Any properties on this class are considered reactive state, and when their values change, the component will re-render the UI.
 For example, we can bind the properties to HTML using double braces in the template.
 From there, we can add a button that increments this value every time it's clicked.
 We add the event name on the left-side and parentheses, then an expression on the right-side.
 In this case, it points to a method in our class.
 Each time the button is clicked, it calls the method, which changes the state, and re-renders the UI.
 Angular also has a variety of directives for building complex templates.
 Use NGF to handle conditional logic.
 Or if you have an iterable value, use NGFore to loop over it.
 But where Angular really excels is handling complexity, and one of its primary tools for doing so is called dependency injection.
 When your app grows to hundreds of components, you'll likely need a way to share data and functionality between them.
 Take our component logic here and extract it into a service which can be treated as a global singleton throughout the application.
 Now any component that wants to use this state or logic can simply add this class to its constructor.
 The end result is a simple and reliable way to compose complex applications.
 As a developer, you can always count on a consistent experience between projects and minimal decision fatigue.
 This has been Angular in 100 seconds.
 If you want to see more short videos like this, make sure to like and subscribe, and check out a ton of advanced Angular content on FireShit.
io.
 Thanks for watching, and I will see you in the next one.